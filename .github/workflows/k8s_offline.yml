name: "Kubernetes Offline Installer Builder"

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  read-kube-version:
    name: "Read Kubernetes Version"
    runs-on: ubuntu-latest
    outputs:
      kube_version: ${{ steps.read_version.outputs.kube_version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Read Kubernetes Version from YAML
        id: read_version
        run: |
          KUBE_VERSION=$(grep 'kubernetes_version:' deploy/pipeline/kubeversion.yaml | awk '{print $2}' | tr -d '[:space:]')
          if [[ -z "$KUBE_VERSION" ]]; then
            echo "Error: Kubernetes version is missing from kubeversion.yaml!"
            exit 1
          fi
          echo "kube_version=$KUBE_VERSION" >> "$GITHUB_ENV"
          echo "kube_version=$KUBE_VERSION" >> "$GITHUB_OUTPUT"

  build:
    name: "Build Offline Installer for ${{ matrix.os }}"
    runs-on: ubuntu-latest
    needs: read-kube-version
    env:
      K8S_VERSION: ${{ needs.read-kube-version.outputs.kube_version }}
    strategy:
      matrix:
        os: [ubuntu]  # Add more OS types if needed
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Start Build Container
        run: |
          case "${{ matrix.os }}" in
            ubuntu) IMAGE="ubuntu:20.04" ;;
            debian) IMAGE="debian:latest" ;;
            centos) IMAGE="centos:8" ;;
            rocky) IMAGE="rockylinux:8" ;;
            fedora) IMAGE="fedora:latest" ;;
            arch) IMAGE="archlinux:latest" ;;
            opensuse) IMAGE="opensuse/leap:latest" ;;
            *) echo "Unsupported OS: ${{ matrix.os }}"; exit 1 ;;
          esac
          echo "Starting build container for ${{ matrix.os }}..."
          docker run --rm -d --name build-container -v "$PWD:/repo" -w /repo "$IMAGE" tail -f /dev/null

      - name: Ensure Correct Artifacts Directory Inside Container
        run: docker exec build-container bash -c "mkdir -p /test-env/artifacts && chmod -R 777 /test-env/artifacts"

      - name: Run Kubernetes Dependency & Package Indexer
        run: docker exec build-container bash -c "bash /repo/deploy/pipeline/setup.sh ${{ matrix.os }} $K8S_VERSION /test-env/artifacts"

      - name: Debug List Artifacts Inside Build Container
        run: docker exec build-container ls -lah /test-env/artifacts || echo "⚠️ Warning /test-env/artifacts does not exist!"

      - name: Extract Built Artifacts from Container
        run: docker cp build-container:/test-env/artifacts ./artifacts || echo "⚠️ Warning No artifacts found to copy!"

      - name: Stop Build Container
        run: docker stop build-container || echo "⚠️ Warning Build container was already stopped."

      - name: Upload Offline Package Archive
        uses: actions/upload-artifact@v4
        with:
          name: offline_packages_${{ matrix.os }}_${{ env.K8S_VERSION }}
          path: artifacts/offline_packages_${{ matrix.os }}_${{ env.K8S_VERSION }}.tar.gz

      - name: Upload Offline Installation Script
        uses: actions/upload-artifact@v4
        with:
          name: install_script_${{ matrix.os }}_${{ env.K8S_VERSION }}
          path: artifacts/install_${{ matrix.os }}_${{ env.K8S_VERSION }}.sh

  test_install:
    name: "Test Air-Gapped Installation for ${{ matrix.os }}"
    runs-on: ubuntu-latest
    needs: [read-kube-version, build]
    env:
      K8S_VERSION: ${{ needs.read-kube-version.outputs.kube_version }}
    strategy:
      matrix:
        os: [ubuntu]  # Add more OS types if needed
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Offline Package Archive
        uses: actions/download-artifact@v4
        with:
          name: offline_packages_${{ matrix.os }}_${{ env.K8S_VERSION }}
          path: artifacts/

      - name: Download Offline Installation Script
        uses: actions/download-artifact@v4
        with:
          name: install_script_${{ matrix.os }}_${{ env.K8S_VERSION }}
          path: artifacts/

      - name: Start Test Container (No Internet)
        run: |
          case "${{ matrix.os }}" in
            ubuntu) IMAGE="ubuntu:20.04" ;;
            debian) IMAGE="debian:latest" ;;
            centos) IMAGE="centos:8" ;;
            rocky) IMAGE="rockylinux:8" ;;
            fedora) IMAGE="fedora:latest" ;;
            arch) IMAGE="archlinux:latest" ;;
            opensuse) IMAGE="opensuse/leap:latest" ;;
            *) echo "Unsupported OS: ${{ matrix.os }}"; exit 1 ;;
          esac
          echo "Starting test container for ${{ matrix.os }}..."
          docker run --rm -d --name test-container --network none -v "$PWD/artifacts:/test-env/artifacts" "$IMAGE" tail -f /dev/null

      - name: Debug List Extracted Files Inside Test Container
        run: docker exec test-container ls -lah /test-env/artifacts || echo "⚠️ Warning No extracted packages found!"

      - name: Extract Offline Packages Inside Test Container
        run: docker exec test-container bash -c "mkdir -p /test-env/artifacts && tar -xvf /test-env/artifacts/offline_packages_${{ matrix.os }}_${{ env.K8S_VERSION }}.tar.gz -C /test-env/artifacts/ || echo 'No extraction needed'"

      - name: Run Offline Installation Inside Test Container
        run: docker exec test-container bash -c "chmod +x /test-env/artifacts/install_${{ matrix.os }}_${{ env.K8S_VERSION }}.sh && /test-env/artifacts/install_${{ matrix.os }}_${{ env.K8S_VERSION }}.sh"

      - name: Stop Test Container
        run: docker stop test-container || echo "⚠️ Warning Test container was already stopped."
