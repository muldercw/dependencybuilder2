name: "Kubernetes Offline Installer Builder"

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  read-kube-version:
    name: "Read Kubernetes Version"
    runs-on: ubuntu-latest
    outputs:
      kube_version: ${{ steps.read_version.outputs.kube_version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Read Kubernetes Version from YAML
        id: read_version
        run: |
          KUBE_VERSION=$(awk -F': ' '/kubernetes_version:/ {print $2}' deploy/pipeline/kubeversion.yaml | tr -d '[:space:]')
          if [[ -z "$KUBE_VERSION" ]]; then
            echo "Error: Kubernetes version is missing from kubeversion.yaml!"
            exit 1
          fi
          echo "kube_version=$KUBE_VERSION" >> $GITHUB_ENV


  build:
    name: "Build Offline Installer for ${{ matrix.os }}"
    runs-on: ubuntu-latest
    needs: read-kube-version
    strategy:
      matrix:
        os: [ubuntu, debian, almalinux, centos, rocky, fedora, arch, opensuse]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Kubernetes Dependency & Package Indexer
        run: bash deploy/pipeline/setup.sh ${{ matrix.os }} ${{ env.kube_version }}

      - name: Upload Dependencies YAML
        uses: actions/upload-artifact@v4
        with:
          name: dependencies-${{ matrix.os }}
          path: dependencies.yaml

      - name: Upload Offline Package Archive
        uses: actions/upload-artifact@v4
        with:
          name: offline-packages-${{ matrix.os }}
          path: offline_packages_${{ matrix.os }}_${{ env.kube_version }}.tar.gz

      - name: Upload Offline Installation Script
        uses: actions/upload-artifact@v4
        with:
          name: install-script-${{ matrix.os }}
          path: install_${{ matrix.os }}_${{ env.kube_version }}.sh

      - name: Upload Checksums
        uses: actions/upload-artifact@v4
        with:
          name: checksums-${{ matrix.os }}
          path: checksums_${{ matrix.os }}_${{ env.kube_version }}.sha256

  test_install:
    name: "Test Air-Gapped Installation for ${{ matrix.os }}"
    runs-on: ubuntu-latest
    needs: [read-kube-version, build]
    strategy:
      matrix:
        os: [ubuntu, debian, almalinux, centos, rocky, fedora, arch, opensuse]
    steps:
      - name: Download Offline Package Archive
        uses: actions/download-artifact@v4
        with:
          name: offline-packages-${{ matrix.os }}
          path: ./

      - name: Download Offline Installation Script
        uses: actions/download-artifact@v4
        with:
          name: install-script-${{ matrix.os }}
          path: ./

      - name: Download Checksums
        uses: actions/download-artifact@v4
        with:
          name: checksums-${{ matrix.os }}
          path: ./

      - name: Verify SHA256 Checksums
        run: sha256sum -c checksums_${{ matrix.os }}_${{ env.kube_version }}.sha256

      - name: Set Executable Permissions
        run: chmod +x install_${{ matrix.os }}_${{ env.kube_version }}.sh

      - name: Start Test Container
        run: |
          case "${{ matrix.os }}" in
            ubuntu) IMAGE="ubuntu:20.04" ;;
            debian) IMAGE="debian:latest" ;;
            almalinux) IMAGE="almalinux:8" ;;
            centos) IMAGE="centos:8" ;;
            rocky) IMAGE="rockylinux:8" ;;
            fedora) IMAGE="fedora:latest" ;;
            arch) IMAGE="archlinux:latest" ;;
            opensuse) IMAGE="opensuse/leap:latest" ;;
            *) echo "Unsupported OS: ${{ matrix.os }}"; exit 1 ;;
          esac
          echo "Starting test container for ${{ matrix.os }}..."
          docker run --rm -d --name test-container -v $PWD:/test-env $IMAGE tail -f /dev/null

      - name: Run Offline Installation Inside Test Container
        run: docker exec test-container bash -c "/test-env/install_${{ matrix.os }}_${{ env.kube_version }}.sh"

      - name: Verify Kubernetes & Containerd
        run: |
          docker exec test-container bash -c "kubeadm version"
          docker exec test-container bash -c "kubectl version --client"
          docker exec test-container bash -c "kubelet --version"
          docker exec test-container bash -c "containerd --version"

      - name: Stop Test Container
        if: always()
        run: docker stop test-container
